from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update
from telegram.ext import ApplicationBuilder, CommandHandler, CallbackQueryHandler, ContextTypes
import random
import os

# —Ç–æ–∫–µ–Ω –±–µ—Ä—ë–º –∏–∑ Railway –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
BOT_TOKEN = os.getenv("BOT_TOKEN")

# --------- –î–ê–ù–ù–´–ï ---------
# –∑–∞–≥—Ä—É–∂–∞–µ–º —Ñ—Ä–∞–∑—ã –∫–∞—Ä—Ç –∏ —Ü–∏—Ç–∞—Ç –∏–∑ —Ñ–∞–π–ª–æ–≤
with open("data/ua_cards.txt", "r", encoding="utf-8") as f:
    cards_ua = f.read().splitlines()

with open("data/en_cards.txt", "r", encoding="utf-8") as f:
    cards_en = f.read().splitlines()

with open("data/ua_quotes.txt", "r", encoding="utf-8") as f:
    quotes_ua = f.read().splitlines()

with open("data/en_quotes.txt", "r", encoding="utf-8") as f:
    quotes_en = f.read().splitlines()


# --------- –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò ---------
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("–£–∫—Ä–∞—ó–Ω—Å—å–∫–∞ üá∫üá¶", callback_data='lang_ua')],
        [InlineKeyboardButton("English üá¨üáß", callback_data='lang_en')]
    ]
    await update.message.reply_text(
        "üåç Please choose language / –ë—É–¥—å –ª–∞—Å–∫–∞, –æ–±–µ—Ä—ñ—Ç—å –º–æ–≤—É:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )


async def button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    # –≤—ã–±–æ—Ä —è–∑—ã–∫–∞
    if query.data == 'lang_ua':
        context.user_data['lang'] = 'ua'
        keyboard = [
            [InlineKeyboardButton("–ú–µ—Ç–∞—Ñ–æ—Ä–∏—á–Ω—ñ –∫–∞—Ä—Ç–∏", callback_data='cards')],
            [InlineKeyboardButton("–¶–∏—Ç–∞—Ç–∞ –¥–Ω—è", callback_data='quote')]
        ]
        await query.edit_message_text("–û–±–µ—Ä—ñ—Ç—å –æ–ø—Ü—ñ—é:", reply_markup=InlineKeyboardMarkup(keyboard))

    elif query.data == 'lang_en':
        context.user_data['lang'] = 'en'
        keyboard = [
            [InlineKeyboardButton("Metaphorical Cards", callback_data='cards')],
            [InlineKeyboardButton("Daily Quote", callback_data='quote')]
        ]
        await query.edit_message_text("Choose an option:", reply_markup=InlineKeyboardMarkup(keyboard))

    # –≤—ã–±–æ—Ä –∫–∞—Ä—Ç
    elif query.data == 'cards':
        lang = context.user_data.get('lang', 'en')
        if lang == 'ua':
            cards = cards_ua
        else:
            cards = cards_en

        card_index = random.randint(0, len(cards) - 1)
        card_text = cards[card_index]
        card_image = f"data/images/{card_index+1}.png"   # –ø—É—Ç—å –º–µ–Ω—è–µ–º –Ω–∞ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π

        with open(card_image, 'rb') as img:
            await context.bot.send_photo(
                chat_id=query.message.chat_id,
                photo=img,
                caption=card_text
            )

    # –≤—ã–±–æ—Ä —Ü–∏—Ç–∞—Ç—ã
    elif query.data == 'quote':
        lang = context.user_data.get('lang', 'en')
        if lang == 'ua':
            quote = random.choice(quotes_ua)
        else:
            quote = random.choice(quotes_en)

        await query.edit_message_text(text=f"‚ú® {quote}")


# --------- –ó–ê–ü–£–°–ö ---------
if __name__ == "__main__":
    app = ApplicationBuilder().token(BOT_TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CallbackQueryHandler(button))
    app.run_polling()
